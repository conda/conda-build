name: Tests

on:
  # https://docs.github.com/en/webhooks-and-events/webhooks/webhook-events-and-payloads#push
  push:
    branches:
      - main
      - feature/**
      - '[0-9].*.x'  # e.g., 3.24.x

  # https://docs.github.com/en/webhooks-and-events/webhooks/webhook-events-and-payloads#pull_request
  pull_request:

  # https://docs.github.com/en/webhooks-and-events/webhooks/webhook-events-and-payloads#workflow_dispatch
  workflow_dispatch:

  # no payload
  schedule:
      # https://crontab.guru/#37_18_*_*_*
      - cron: 37 18 * * *

concurrency:
  # Concurrency group that uses the workflow name and PR number if available
  # or commit SHA as a fallback. If a new build is triggered under that
  # concurrency group while a previous build is running it will be canceled.
  # Repeated pushes to a PR will cancel all previous builds, while multiple
  # merges to main will not cancel.
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  # detect whether any code changes are included in this PR
  changes:
    runs-on: ubuntu-latest
    permissions:
      # necessary to detect changes
      # https://github.com/dorny/paths-filter#supported-workflows
      pull-requests: read
    outputs:
      code: ${{ steps.filter.outputs.code }}
    steps:
      - uses: actions/checkout@v3
        # dorny/paths-filter needs git clone for non-PR events
        # https://github.com/marketplace/actions/paths-changes-filter#supported-workflows
        if: github.event_name != 'pull_request'

      - uses: dorny/paths-filter@4512585405083f25c027a35db413c2b3b9006d50
        id: filter
        with:
          filters: |
            code:
              - 'conda_build/**'
              - 'tests/**'
              - '*.py'
              - 'recipe/**'
              - '.github/workflows/tests.yml'

  # linux test suite
  linux:
    # only run test suite if there are code changes
    needs: changes
    if: github.event_name == 'schedule' || needs.changes.outputs.code == 'true'

    runs-on: ubuntu-latest
    defaults:
      run:
        # https://github.com/conda-incubator/setup-miniconda#use-a-default-shell
        shell: bash -l {0}
    strategy:
      fail-fast: false
      matrix:
        # test all lower versions (w/ stable conda) and upper version (w/ canary conda)
        python-version: ['3.8', '3.9', '3.10', '3.11']
        conda-version: [release, canary]
        test-type: [serial, parallel]
        test-group: [1, 2, 3]
        exclude:
          - python-version: '3.8'
            conda-version: canary
          - python-version: '3.9'
            conda-version: canary
          - python-version: '3.10'
            conda-version: canary
          - python-version: '3.11'
            conda-version: release
          - test-type: serial
            test-group: 3
    env:
      ALLURE_DIR: ${{ github.workspace }}/allure-results
      CONDA_CHANNEL_LABEL: ${{ matrix.conda-version == 'canary' && 'conda-canary/label/dev' || 'defaults' }}
      PYTEST_MARKER: ${{ matrix.test-type == 'serial' && 'serial' || 'not serial' }}
      PYTEST_NUMPROCESSES: ${{ matrix.test-type == 'serial' && 0 || 'auto' }}
      PYTEST_SPLITS: ${{ matrix.test-type == 'serial' && 2 || 3 }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Hash + Timestamp
        run: echo "HASH=${{ runner.os }}-${{ runner.arch }}-Py${{ matrix.python-version }}-${{ matrix.conda-version }}-${{ matrix.test-type }}-${{ matrix.test-group }}-$(date -u "+%Y%m")" >> $GITHUB_ENV
        shell: bash

      - name: Cache conda
        uses: actions/cache@v3
        with:
          path: ~/conda_pkgs_dir
          key: cache-${{ env.HASH }}

      - name: Setup miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          condarc-file: .github/condarc
          python-version: ${{ matrix.python-version }}
          run-post: false  # skip post cleanup

      - name: Setup environment
        run: |
          conda install --quiet --yes \
            --file ./tests/requirements.txt \
            --file ./tests/requirements-linux.txt \
            ${{ env.CONDA_CHANNEL_LABEL }}::conda
          pip install -e .

      - name: Show info
        run: |
          conda info --verbose
          conda list --show-channel-urls

      - name: Run tests
        run: |
          pytest \
            --alluredir="${{ env.ALLURE_DIR }}" \
            --basetemp="${{ runner.temp }}/${{ matrix.test-type }}" \
            --cov=conda_build \
            --durations-path="./tools/durations/${{ runner.os }}.json" \
            --group=${{ matrix.test-group }} \
            --splits=${{ env.PYTEST_SPLITS }} \
            -n "${{ env.PYTEST_NUMPROCESSES }}" \
            -m "${{ env.PYTEST_MARKER }}"

      - uses: codecov/codecov-action@v3
        with:
          flags: ${{ runner.os }},${{ runner.arch }},${{ matrix.python-version }},${{ matrix.test-type }}

      - name: Upload durations
        if: '!cancelled()'
        uses: actions/upload-artifact@v3
        with:
          name: durations-${{ env.HASH }}
          path: ./tools/durations/${{ runner.os }}.json
          retention-days: 7  # for durations.yml workflow

      - name: Tar Allure Results
        if: '!cancelled()'
        run: tar -zcf "${{ env.ALLURE_DIR }}.tar.gz" "${{ env.ALLURE_DIR }}"

      - name: Upload Allure Results
        if: '!cancelled()'
        uses: actions/upload-artifact@v3
        with:
          name: allure-${{ env.HASH }}
          path: ${{ env.ALLURE_DIR }}

  # windows test suite
  windows:
    # only run test suite if there are code changes
    needs: changes
    if: github.event_name == 'schedule' || needs.changes.outputs.code == 'true'

    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        # test lower version (w/ stable conda) and upper version (w/ canary conda)
        python-version: ['3.8', '3.11']
        conda-version: [release, canary]
        test-type: [serial, parallel]
        test-group: [1, 2, 3]
        exclude:
          - python-version: '3.8'
            conda-version: canary
          - python-version: '3.11'
            conda-version: release
          - test-type: serial
            test-group: 3
    env:
      ALLURE_DIR: ${{ github.workspace }}\allure-results
      CONDA_CHANNEL_LABEL: ${{ matrix.conda-version == 'canary' && 'conda-canary/label/dev' || 'defaults' }}
      PYTEST_MARKER: ${{ matrix.test-type == 'serial' && 'serial' || 'not serial and not slow' }}
      PYTEST_NUMPROCESSES: ${{ matrix.test-type == 'serial' && 0 || 'auto' }}
      PYTEST_SPLITS: ${{ matrix.test-type == 'serial' && 2 || 3 }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Hash + Timestamp
        run: echo "HASH=${{ runner.os }}-${{ runner.arch }}-Py${{ matrix.python-version }}-${{ matrix.conda-version }}-${{ matrix.test-type }}-${{ matrix.test-group }}-$(date -u "+%Y%m")" >> $GITHUB_ENV
        shell: bash

      - name: Cache conda
        uses: actions/cache@v3
        with:
          path: ~/conda_pkgs_dir
          key: cache-${{ env.HASH }}

      - name: Setup miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          condarc-file: .github\condarc
          python-version: ${{ matrix.python-version }}
          run-post: false  # skip post cleanup

      - name: Setup environment
        run: |
          choco install visualstudio2017-workload-vctools
          conda install --quiet --yes `
            --file .\tests\requirements.txt `
            --file .\tests\requirements-${{ runner.os }}.txt `
            ${{ env.CONDA_CHANNEL_LABEL }}::conda
          pip install -e .

      - name: Show info
        run: |
          conda info --verbose
          conda list --show-channel-urls

      - name: Run tests
        run: |
          pytest `
            --alluredir="${{ env.ALLURE_DIR }}" `
            --basetemp="${{ runner.temp }}\${{ matrix.test-type }}" `
            --cov=conda_build `
            --durations-path=".\tools\durations\${{ runner.os }}.json" `
            --group=${{ matrix.test-group }} `
            --splits=${{ env.PYTEST_SPLITS }} `
            -m "${{ env.PYTEST_MARKER }}" `
            -n "${{ env.PYTEST_NUMPROCESSES }}"

      - uses: codecov/codecov-action@v3
        with:
          flags: ${{ runner.os }},${{ runner.arch }},${{ matrix.python-version }},${{ matrix.test-type }}

      - name: Upload test results
        if: '!cancelled()'
        uses: actions/upload-artifact@v3
        with:
          name: durations-${{ env.HASH }}
          path: .\tools\durations\${{ runner.os }}.json
          retention-days: 7  # for durations.yml workflow

      - name: Tar Allure Results
        if: '!cancelled()'
        run: tar -zcf "${{ env.ALLURE_DIR }}.tar.gz" "${{ env.ALLURE_DIR }}"
        # windows-2019/powershell ships with GNU tar 1.28 which struggles with Windows paths
        # window-2019/cmd ships with bsdtar 3.5.2 which doesn't have this problem
        shell: cmd

      - name: Upload Allure Results
        if: '!cancelled()'
        uses: actions/upload-artifact@v3
        with:
          name: allure-${{ env.HASH }}
          path: "${{ env.ALLURE_DIR }}"

  # macos test suite
  macos:
    # only run test suite if there are code changes
    needs: changes
    if: github.event_name == 'schedule' || needs.changes.outputs.code == 'true'

    runs-on: macos-latest
    defaults:
      run:
        # https://github.com/conda-incubator/setup-miniconda#use-a-default-shell
        shell: bash -l {0}
    strategy:
      fail-fast: false
      matrix:
        # test lower version (w/ stable conda) and upper version (w/ canary conda)
        python-version: ['3.8', '3.11']
        conda-version: [release, canary]
        test-type: [serial, parallel]
        test-group: [1, 2, 3]
        exclude:
          - python-version: '3.8'
            conda-version: canary
          - python-version: '3.11'
            conda-version: release
          - test-type: serial
            test-group: 3
    env:
      ALLURE_DIR: ${{ github.workspace }}/allure-results
      CONDA_CHANNEL_LABEL: ${{ matrix.conda-version == 'canary' && 'conda-canary/label/dev' || 'defaults' }}
      PYTEST_MARKER: ${{ matrix.test-type == 'serial' && 'serial' || 'not serial' }}
      PYTEST_NUMPROCESSES: ${{ matrix.test-type == 'serial' && 0 || 'auto' }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Hash + Timestamp
        run: echo "HASH=${{ runner.os }}-${{ runner.arch }}-Py${{ matrix.python-version }}-${{ matrix.conda-version }}-${{ matrix.test-type }}-${{ matrix.test-group }}-$(date -u "+%Y%m")" >> $GITHUB_ENV
        shell: bash

      - name: Cache conda
        uses: actions/cache@v3
        with:
          path: ~/conda_pkgs_dir
          key: cache-${{ env.HASH }}

      - name: Setup miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          condarc-file: .github/condarc
          python-version: ${{ matrix.python-version }}
          run-post: false  # skip post cleanup

      - name: Setup environment
        run: |
          sudo xcode-select --switch /Applications/Xcode_11.7.app
          conda install --quiet --yes \
            --file ./tests/requirements.txt \
            --file ./tests/requirements-${{ runner.os }}.txt \
            ${{ env.CONDA_CHANNEL_LABEL }}::conda
          pip install -e .

      - name: Show info
        run: |
          conda info --verbose
          conda list --show-channel-urls

      - name: Run tests
        run: |
          pytest \
            --alluredir="${{ env.ALLURE_DIR }}" \
            --basetemp="${{ runner.temp }}/${{ matrix.test-type }}" \
            --cov=conda_build \
            --durations-path=./tools/durations/${{ runner.os }}.json \
            --group=${{ matrix.test-group }} \
            --splits=${{ env.PYTEST_SPLITS }} \
            -m "${{ env.PYTEST_MARKER }}" \
            -n "${{ env.PYTEST_NUMPROCESSES }}"

      - uses: codecov/codecov-action@v3
        with:
          flags: ${{ runner.os }},${{ runner.arch }},${{ matrix.python-version }},${{ matrix.test-type }}

      - name: Upload durations
        if: '!cancelled()'
        uses: actions/upload-artifact@v3
        with:
          name: durations-${{ env.HASH }}
          path: ./tools/durations/${{ runner.os }}.json
          retention-days: 7  # for duration.yml workflow

      - name: Tar Allure Results
        if: '!cancelled()'
        run: tar -zcf "${{ env.ALLURE_DIR }}.tar.gz" "${{ env.ALLURE_DIR }}"

      - name: Upload Allure Results
        if: '!cancelled()'
        uses: actions/upload-artifact@v3
        with:
          name: allure-${{ env.HASH }}
          path: ${{ env.ALLURE_DIR }}

  # aggregate and upload
  aggregate:
    # only aggregate test suite if there are code changes
    needs: [changes, linux, windows, macos]
    if: >-
      !cancelled()
      && (
        github.event_name == 'schedule'
        || needs.changes.outputs.code == 'true'
      )

    runs-on: ubuntu-latest
    steps:
      - name: Download test results
        uses: actions/download-artifact@v3

      - name: Upload combined test results
        # provides one downloadable archive of all .coverage/test-report.xml files
        # of all matrix runs for further analysis.
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ github.sha }}-all
          path: test-results-${{ github.sha }}-*
          retention-days: 90  # default: 90

      - name: Test Summary
        uses: test-summary/action@v2
        with:
          paths: ./test-results-${{ github.sha }}-**/test-report*.xml

  # required check
  analyze:
    name: Analyze results
    needs: [linux, windows, macos, aggregate]
    if: '!cancelled()'

    runs-on: ubuntu-latest
    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@05ac9388f0aebcb5727afa17fcccfecd6f8ec5fe
        with:
          allowed-skips: ${{ toJSON(needs) }}
          jobs: ${{ toJSON(needs) }}

  # canary builds
  build:
    name: Canary Build
    needs: [analyze]
    # only build canary build if
    # - prior steps succeeded,
    # - this is the main repo, and
    # - we are on the main, feature, or release branch
    if: >-
      !cancelled()
      && !github.event.repository.fork
      && (
        github.ref_name == 'main'
        || startsWith(github.ref_name, 'feature/')
        || endsWith(github.ref_name, '.x')
      )
    strategy:
      matrix:
        include:
          - runner: ubuntu-latest
            subdir: linux-64
          - runner: macos-latest
            subdir: osx-64
          - runner: windows-latest
            subdir: win-64
    runs-on: ${{ matrix.runner }}
    steps:
      # Clean checkout of specific git ref needed for package metadata version
      # which needs env vars GIT_DESCRIBE_TAG and GIT_BUILD_STR:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
          clean: true
          fetch-depth: 0

      # Explicitly use Python 3.11 since each of the OSes has a different default Python
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Detect label
        shell: python
        run: |
          from pathlib import Path
          from re import match
          from os import environ

          if "${{ github.ref_name }}" == "main":
              # main branch commits are uploaded to the dev label
              label = "dev"
          elif "${{ github.ref_name }}".startswith("feature/"):
              # feature branch commits are uploaded to a custom label
              label = "${{ github.ref_name }}"
          else:
              # release branch commits are added to the rc label
              # see https://github.com/conda/infrastructure/issues/760
              _, name = "${{ github.repository }}".split("/")
              label = f"rc-{name}-${{ github.ref_name }}"

          Path(environ["GITHUB_ENV"]).write_text(f"ANACONDA_ORG_LABEL={label}")

      - name: Create and upload canary build
        uses: conda/actions/canary-release@v23.7.0
        with:
          package-name: ${{ github.event.repository.name }}
          subdir: ${{ matrix.subdir }}
          anaconda-org-channel: conda-canary
          anaconda-org-label: ${{ env.ANACONDA_ORG_LABEL }}
          anaconda-org-token: ${{ secrets.ANACONDA_ORG_CONDA_CANARY_TOKEN }}
