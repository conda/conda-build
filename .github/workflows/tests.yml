name: Tests

on:
  # NOTE: github.event context is push payload:
  # https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#push
  push:
    branches:
      - main
    paths-ignore:
      - 'docs/**'

  # NOTE: github.event context is pull_request payload:
  # https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#pull_request
  pull_request:
    types:
      - opened
      - reopened
      - synchronize

concurrency:
  # Concurrency group that uses the workflow name and PR number if available
  # or commit SHA as a fallback. If a new build is triggered under that
  # concurrency group while a previous build is running it will be canceled.
  # Repeated pushes to a PR will cancel all previous builds, while multiple
  # merges to main will not cancel.
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  linux:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9']
        conda-version: [release]
        test-type: [parallel]
        include:
          - python-version: '3.10'
            conda-version: canary
            test-type: serial
          - python-version: '3.10'
            conda-version: canary
            test-type: parallel
    env:
      pytest-replay: --replay-record-dir=pytest-replay/ --replay-base-name=Linux-${{ matrix.conda-version }}-Py${{ matrix.python-version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          condarc-file: ci/github/.condarc
          python-version: ${{ matrix.python-version }}

      - name: Install Conda-Canary if canary version
        if: matrix.conda-version == 'canary'
        run: |
          conda install -y -c conda-canary/label/dev conda

      - name: Install default Conda if release version
        if: matrix.conda-version == 'release'
        run: |
          conda install -y conda

      - name: Source Scripts
        run: |
          source ci/github/install_conda_build_test_deps
          pip install -e .
          pip install allure-pytest
          pip install setuptools wheel twine
          conda info -a
          mkdir -p ./pytest-replay
          mkdir -p ./allure-results
          mkdir -p ./allure-reslusts/allure-reports
          mkdir -p ./allure-results/allure-history

          echo "Finding the Test folder"
          pwd

      - name: Run Serial tests
        if: matrix.test-type == 'serial'
        run: |
          pytest \
              --color=yes \
              -vv \
              -n 0 \
              --basetemp /tmp/cb_serial \
              --cov conda_build \
              --cov-report xml \
              -m "serial" tests \
              ${{ env.pytest-replay }} \
              --alluredir = "./allure-results"
      
      - name: Run Parallel tests
        if: matrix.test-type == 'parallel'
        run: |
          pytest \
              --color=yes \
              -vv \
              -n auto \
              --basetemp /tmp/cb \
              --cov conda_build \
              --cov-append \
              --cov-report xml \
              -m "not serial" tests \
              ${{ env.pytest-replay }} \
              --alluredir = "./allure-results"
      
      - name: Upload Pytest Replay
        uses: actions/upload-artifact@v2
        with:
          name: Linux_replay-py-${{ matrix.python-version }}_${{ matrix.conda-version }}_${{ matrix.test-type }}
          path: pytest-replay/

      - name: Setup allure report
        uses: simple-elf/allure-report-action@master
        if: always()
        id: allure-report
        with:
          allure_results: build/allure-results
          gh_pages: gh-pages
          allure_report: allure-report
          allure_history: allure-history
          keep_reports: 20

      - name: Get Allure history
        uses: actions/checkout@v2
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

      - name: Deploy report to Github Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v3
        env:
          PERSONAL_TOKEN: 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
          PUBLISH_BRANCH: gh-pages
          PUBLISH_DIR: allure-history

      - name: Post the link to the report
        if: always()
        uses: Sibz/github-status-action@v1
        with: 
            context: 'Allure Test Report'
            state: 'success'
            sha: ${{ github.event.pull_request.head.sha }}
            target_url: sven6002.github.io/conda-build/github-allure-history/${{ github.run_number }}


  pages:
    runs-on: ubuntu-latest
# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
    permissions:
      contents: read
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1