name: Tests

on:
  # NOTE: github.event context is push payload:
  # https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#push
  push:
    branches:
      - main
      - feature/**

  # NOTE: github.event context is pull_request payload:
  # https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#pull_request
  pull_request:

concurrency:
  # Concurrency group that uses the workflow name and PR number if available
  # or commit SHA as a fallback. If a new build is triggered under that
  # concurrency group while a previous build is running it will be canceled.
  # Repeated pushes to a PR will cancel all previous builds, while multiple
  # merges to main will not cancel.
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  windows:
    runs-on: windows-2019
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.7']
        conda-version: [release]
        test-type: [serial]
    timeout-minutes: 120
    env:
      serial_or_parallel: ''

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set temp dirs correctly
        shell: cmd
        # https://github.com/actions/virtual-environments/issues/712
        run: |
          echo "TMPDIR=$env:USERPROFILE\AppData\Local\Temp" >> $env:GITHUB_ENV
          echo "TEMP=$env:USERPROFILE\AppData\Local\Temp" >> $env:GITHUB_ENV
          echo "TMP=$env:USERPROFILE\AppData\Local\Temp" >> $env:GITHUB_ENV

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install miniconda
        run: |
          rmdir C:\Strawberry /s /q
          choco install --no-progress wget visualstudio2017-workload-vctools
          wget --no-verbose https://repo.anaconda.com/miniconda/Miniconda3-latest-Windows-x86_64.exe
          start /wait "" Miniconda3-latest-Windows-x86_64.exe /InstallationType=JustMe /S /D=%UserProfile%\Miniconda3
          "%UserProfile%\Miniconda3\condabin\conda.bat" init
          conda info -a
        shell: cmd

      - name: conda init
        run: |
          echo on
          set PATH
          doskey conda="call %UserProfile%\Miniconda3\condabin\conda.bat" $*
          doskey /macros
          call "%UserProfile%\Miniconda3\condabin\conda.bat" init
          set PATH
        shell: cmd

      - name: Configuration
        run: |
          echo on
          set PATH
          call %UserProfile%\Miniconda3\condabin\activate.bat base||exit 1
          set PATH
          call conda update -q --all||exit 1
          call conda config --set always_yes yes
          call conda config --set auto_update_conda no
          call conda config --set safety_checks disabled
          call conda config --set local_repodata_ttl 1800
          if "%CONDA_VERSION%" == "canary" set "CANARY_CHANNEL=conda-canary/label/dev::"
          call conda install -q python="%PYTHON_VERSION%" ^
            %CANARY_CHANNEL%conda ^
            pip python-libarchive-c pytest git pytest-cov jinja2 m2-patch flake8 mock requests contextlib2 chardet glob2 perl pyflakes pycrypto posix m2-git anaconda-client numpy beautifulsoup4 pytest-xdist pytest-mock filelock pkginfo psutil pytz tqdm conda-package-handling ^
            pytest-replay pytest-rerunfailures ^
            "conda-forge::py-lief>=0.12.3" ^
            ||exit 1
          call conda info
          python -c "import sys; print(sys.version)"
          python -c "import sys; print(sys.executable)"
          python -c "import sys; print(sys.prefix)"
          python --version
          python -c "import struct; print(struct.calcsize('P') * 8)"
          pip install --no-deps .
          conda-build --version
          pushd .. && git clone https://github.com/conda/conda_build_test_recipe && popd
          mkdir %UserProfile%\cbtmp_serial
          mkdir %UserProfile%\cbtmp
          for /d %%F in (%UserProfile%\cbtmp_serial\*) do rd /s /q "%%F"
          for /d %%F in (%UserProfile%\cbtmp\*) do rd /s /q "%%F"
          mkdir ${{ github.workspace }}\\pytest-replay
          set "PYTEST_REPLAY_OPTIONS=--replay-record-dir=${{ github.workspace }}\\pytest-replay --replay-base-name=Win-%CONDA_VERSION%-Py%PYTHON_VERSION%"
          echo "##vso[task.setvariable variable=PYTEST_REPLAY_OPTIONS]%PYTEST_REPLAY_OPTIONS%"
        shell: cmd

      - name: Run Serial Tests
        if: matrix.test-type == 'serial'
        run: |
          echo on
          set PATH
          call %UserProfile%\Miniconda3\condabin\activate.bat base||exit 1
          set PATH
          :: call conda install -y conda-verify||exit 1
          set PERL=
          set LUA=
          set R=
          set PYTHONUNBUFFERED=1
          pytest --color=yes -vv -n 0 --basetemp %UserProfile%\cbtmp_serial --cov conda_build --cov-report xml -m "serial" ${{ env.pytest-replay }} -k "test_recipe_builds[entry_points]"
        shell: cmd
