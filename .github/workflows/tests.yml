# this is the sibling workflow to tests-skip.yml, it is required to work around
# the skipped but required checks issue:
#   https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/troubleshooting-required-status-checks#handling-skipped-but-required-checks
name: Tests

on:
  # NOTE: github.event context is push payload:
  # https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#push
  push:
    branches:
      - main
      - feature/**
    paths:  # run if src/tests/recipe are modified
      - conda_build/**
      - tests/**
      - '*.py'
      - recipe/**
      - .github/workflows/tests.yml

  # NOTE: github.event context is pull_request payload:
  # https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#pull_request
  pull_request:
    paths:
      - conda_build/**
      - tests/**
      - '*.py'
      - recipe/**
      - .github/workflows/tests.yml

concurrency:
  # Concurrency group that uses the workflow name and PR number if available
  # or commit SHA as a fallback. If a new build is triggered under that
  # concurrency group while a previous build is running it will be canceled.
  # Repeated pushes to a PR will cancel all previous builds, while multiple
  # merges to main will not cancel.
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  linux:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
        working-directory: ./src/
    strategy:
      fail-fast: false
      matrix:
        # test lower and upper bounds
        python-version: ['3.7', '3.10']
        conda-version: [release]
        test-type: [serial, parallel]
        include:
          - python-version: '3.10'
            conda-version: canary
            test-type: serial
          - python-version: '3.10'
            conda-version: canary
            test-type: parallel
    env:
      CONDA_CHANNEL_LABEL: ${{ matrix.conda-version == 'canary' && 'conda-canary/label/dev' || 'defaults' }}
      REPLAY_NAME: Linux-${{ matrix.conda-version }}-Py${{ matrix.python-version }}
      REPLAY_DIR: ${{ github.workspace }}/pytest-replay/
      ALLURE_DIR: ./allure-results/
      PYTEST_MARKER: ${{ matrix.test-type == 'serial' && 'serial' || 'not serial' }}
      PYTEST_NUMPROCESSES: ${{ matrix.test-type == 'serial' && 0 || 'auto' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          path: ./src/
          fetch-depth: 0

      - name: Checkout test recipe
        uses: actions/checkout@v2
        with:
          repository: conda/conda_build_test_recipe
          path: ./conda_build_test_recipe/
          fetch-depth: 0

      - name: Setup miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          condarc-file: ./src/ci/github/.condarc
          python-version: ${{ matrix.python-version }}

      - name: Setup environment
        run: |
          conda install -q -y -c defaults \
            --file tests/requirements.txt \
            --file tests/requirements-linux.txt \
            ${{ env.CONDA_CHANNEL_LABEL }}::conda
          pip install -e .
          pip install allure-pytest

      - name: Show info
        run: |
          conda info -a
          conda list --show-channel-urls

      - name: Run tests
        run: |
          pytest \
            --color=yes \
            -v \
            -n "${{ env.PYTEST_NUMPROCESSES }}" \
            --basetemp "${{ runner.temp }}/${{ matrix.test-type }}" \
            --cov conda_build \
            --cov-append \
            --cov-report xml \
            --replay-record-dir="${{ env.REPLAY_DIR }}" \
            --replay-base-name="${{ env.REPLAY_NAME }}" \
            --alluredir="${{ env.ALLURE_DIR }}" \
            -m "${{ env.PYTEST_MARKER }}" \
            ./tests/
          tar -zcf "${{ env.ALLURE_DIR }}.tar.gz" "${{ env.ALLURE_DIR }}"

      - name: Upload pytest replay
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.REPLAY_NAME }}-${{ matrix.test-type }}
          path: ${{ env.REPLAY_DIR }}

  windows:
    runs-on: windows-2019
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10']
        conda-version: [release]
        test-type: [serial, parallel]
        include:
          - python-version: '3.9'
            conda-version: canary
            test-type: serial
          - python-version: '3.9'
            conda-version: canary
            test-type: parallel
    timeout-minutes: 120
    env:
      REPLAY_NAME: Win-${{ matrix.conda-version }}-Py${{ matrix.python-version }}
      REPLAY_DIR: .\pytest-replay\
      ALLURE_DIR: .\allure-results\

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install vcpython27.msi
        run: |
          $wc = New-Object net.webclient
          $wc.Downloadfile("https://github.com/GeoNode/geonode-win-installer/raw/ffb76c7cbf1d6b4970c6c25f79c3c7682a3aa035/VCForPython27.msi", "VCForPython27.msi")
          Start-Process "VCForPython27.msi" /qn -Wait
        shell: pwsh

      - name: Install miniconda
        run: |
          rmdir C:\Strawberry /s /q
          choco install wget visualstudio2017-workload-vctools
          wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Windows-x86_64.exe
          start /wait "" Miniconda3-latest-Windows-x86_64.exe /InstallationType=JustMe /S /D=%UserProfile%\Miniconda3
          "%UserProfile%\Miniconda3\condabin\conda.bat" init
          conda info -a
        shell: cmd

      - name: Patch vs2008
        run: |
          Set-PSDebug -Trace 1
          $batchcontent = @"
          ECHO ON
          SET vcpython=C:\Program Files (x86)\Common Files\Microsoft\Visual C++ for Python\9.0
          DIR "%vcpython%"
          CALL "%vcpython%\vcvarsall.bat" %*
          "@
          $batchDir = "C:\Program Files (x86)\Common Files\Microsoft\Visual C++ for Python\9.0\VC"
          $batchPath = "$batchDir" + "\vcvarsall.bat"
          New-Item -Path $batchPath -ItemType "file" -Force
          Set-Content -Value $batchcontent -Path $batchPath
          Get-ChildItem -Path $batchDir
          Get-ChildItem -Path ($batchDir + '\..')
          set LIB
        shell: pwsh

      - name: conda init
        run: |
          echo on
          set PATH
          doskey conda="call %UserProfile%\Miniconda3\condabin\conda.bat" $*
          doskey /macros
          call "%UserProfile%\Miniconda3\condabin\conda.bat" init
          set PATH
        shell: cmd

      - name: Configuration
        run: |
          echo on
          set PATH
          call %UserProfile%\Miniconda3\condabin\activate.bat base||exit 1
          set PATH
          call conda install python="%PYTHON_VERSION%" -y||exit 1
          if "%CONDA_VERSION%" == "canary" (call conda update -c conda-canary/label/dev conda||exit 1) else (call conda update -q conda||exit 1)
          call conda config --set always_yes yes
          call conda config --set auto_update_conda no
          call conda info
          python -c "import sys; print(sys.version)"
          python -c "import sys; print(sys.executable)"
          python -c "import sys; print(sys.prefix)"
          call conda update -q --all||exit 1
          call conda install -q pip python-libarchive-c pytest git pytest-cov jinja2 m2-patch flake8 mock requests contextlib2 chardet glob2 perl pyflakes pycrypto posix m2-git anaconda-client numpy beautifulsoup4 pytest-xdist pytest-mock filelock pkginfo psutil pytz tqdm conda-package-handling||exit 1
          call conda install pytest-replay pytest-rerunfailures -y||exit 1
          echo safety_checks: disabled >> %UserProfile%\.condarc
          echo local_repodata_ttl: 1800 >> %UserProfile%\.condarc
          call conda install -q py-lief||exit 1
          python --version
          python -c "import struct; print(struct.calcsize('P') * 8)"
          pip install --no-deps .
          pip install allure-pytest
          conda-build --version
          pushd .. && git clone https://github.com/conda/conda_build_test_recipe && popd
          mkdir %UserProfile%\cbtmp_serial
          mkdir %UserProfile%\cbtmp
          for /d %%F in (%UserProfile%\cbtmp_serial\*) do rd /s /q "%%F"
          for /d %%F in (%UserProfile%\cbtmp\*) do rd /s /q "%%F"
          call conda create -n blarg -yq --download-only python=2.7||exit 1
          call conda create -n blarg -yq --download-only python=3.8||exit 1
          call conda create -n blarg -yq --download-only python cmake||exit 1
        shell: cmd

      - name: Run Serial Tests
        if: matrix.test-type == 'serial'
        run: |
          echo on
          set PATH
          call %UserProfile%\Miniconda3\condabin\activate.bat base||exit 1
          set PATH
          call conda install -y conda-verify||exit 1
          set PERL=
          set LUA=
          set R=
          pytest ^
            --color=yes ^
            -vv ^
            -n 0 ^
            --basetemp "${{ runner.temp }}\${{ matrix.test-type}}" ^
            --cov conda_build ^
            --cov-report xml ^
            --replay-record-dir="${{ env.REPLAY_DIR }}" ^
            --replay-base-name="${{ env.REPLAY_NAME }}" ^
            --alluredir="${{ env.ALLURE_DIR }}" ^
            -m "serial" ^
            .\tests\
          tar -zcf "${{ env.ALLURE_DIR }}.tar.gz" "${{ env.ALLURE_DIR }}"
        shell: cmd

      - name: Run Parallel Tests
        if: matrix.test-type == 'parallel'
        run: |
          echo on
          set PATH
          call %UserProfile%\Miniconda3\condabin\activate.bat base||exit 1
          set PATH
          :: call conda remove -y conda-verify||exit 1
          set PERL=
          set LUA=
          set R=
          pytest ^
            --color=yes ^
            -vv ^
            -n auto ^
            --basetemp "${{ runner.temp }}\${{ matrix.test-type}}" ^
            --cov conda_build ^
            --cov-append ^
            --cov-report xml ^
            --replay-record-dir="${{ env.REPLAY_DIR }}" ^
            --replay-base-name="${{ env.REPLAY_NAME }}" ^
            --alluredir="${{ env.ALLURE_DIR }}" ^
            -m "not serial" ^
            .\tests\
          tar -zcf "${{ env.ALLURE_DIR }}.tar.gz" "${{ env.ALLURE_DIR }}"
        shell: cmd
        env:
          VS90COMNTOOLS: C:\Program Files (x86)\Common Files\Microsoft\Visual C++ for Python\9.0\VC\bin
          LIB:

      - name: Upload pytest replay
        if: always()
        uses: actions/upload-artifact@v2
        with:
          path: ${{ env.REPLAY_DIR }}
          name: ${{ env.REPLAY_NAME }}-${{ matrix.test-type }}

  macos:
    runs-on: macos-11
    defaults:
      run:
        shell: bash -l {0}
        working-directory: ./src/
    strategy:
      fail-fast: false
      matrix:
        # test lower and upper bounds
        python-version: ['3.7', '3.10']
        conda-version: [canary]
        test-type: [serial, parallel]
      max-parallel: 10
    timeout-minutes: 120
    env:
      CONDA_CHANNEL_LABEL: ${{ matrix.conda-version == 'canary' && 'conda-canary/label/dev' || 'defaults' }}
      REPLAY_NAME: macOS-${{ matrix.conda-version }}-Py${{ matrix.python-version }}
      REPLAY_DIR: ${{ github.workspace }}/pytest-replay/
      ALLURE_DIR: ./allure-results/
      PYTEST_MARKER: ${{ matrix.test-type == 'serial' && 'serial' || 'not serial' }}
      PYTEST_NUMPROCESSES: ${{ matrix.test-type == 'serial' && 0 || 'auto' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          path: ./src/
          fetch-depth: 0

      - name: Checkout test recipe
        uses: actions/checkout@v2
        with:
          repository: conda/conda_build_test_recipe
          path: ./conda_build_test_recipe/
          fetch-depth: 0

      - name: Setup miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          condarc-file: ./src/ci/github/.condarc
          python-version: ${{ matrix.python-version }}

      - name: Setup environment
        run: |
          conda install -q -y -c defaults \
            --file tests/requirements.txt \
            --file tests/requirements-macos.txt \
            ${{ env.CONDA_CHANNEL_LABEL }}::conda
          pip install -e .
          pip install allure-pytest
          sudo xcode-select --switch /Applications/Xcode_11.7.app

      - name: Show info
        run: |
          conda info -a
          conda list --show-channel-urls

      - name: Run tests
        run: |
          pytest \
            --color=yes \
            -v \
            -n "${{ env.PYTEST_NUMPROCESSES }}" \
            --basetemp "${{ runner.temp }}/${{ matrix.test-type }}" \
            --cov conda_build \
            --cov-append \
            --cov-report xml \
            --replay-record-dir="${{ env.REPLAY_DIR }}" \
            --replay-base-name="${{ env.REPLAY_NAME }}" \
            --alluredir="${{ env.ALLURE_DIR }}" \
            -m "${{ env.PYTEST_MARKER }}" \
            ./tests/
          tar -zcf "${{ env.ALLURE_DIR }}.tar.gz" "${{ env.ALLURE_DIR }}"

      - name: Upload pytest replay
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.REPLAY_NAME }}-${{ matrix.test-type  }}
          path: ${{ env.REPLAY_DIR }}

  # required check
  analyze:
    name: Analyze results
    needs: [windows, linux, macos]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Download test results
        uses: actions/download-artifact@v3

      - name: Upload combined test results
        # provides one downloadable archive of all .coverage/test-report.xml files
        # of all matrix runs for further analysis.
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ github.sha }}-all
          path: test-results-${{ github.sha }}-*
          retention-days: 90  # default: 90

      - name: Test Summary
        uses: test-summary/action@v2
        with:
          paths: ./test-results-${{ github.sha }}-**/test-report*.xml

      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}

  build:
    name: Canary Build
    needs: [analyze]
    # only build canary build iff
    # - prior steps succeeded,
    # - this is the main repo, and
    # - we are on the main (or feature) branch
    if: >-
      success()
      && !github.event.repository.fork
      && (
        github.ref_name == 'main'
        || startsWith(github.ref_name, 'feature/')
      )
    strategy:
      matrix:
        include:
          - runner: ubuntu-latest
            subdir: linux-64
          - runner: macos-latest
            subdir: osx-64
          - runner: windows-latest
            subdir: win-64
    runs-on: ${{ matrix.runner }}
    steps:
      # Clean checkout of specific git ref needed for package metadata version
      # which needs env vars GIT_DESCRIBE_TAG and GIT_BUILD_STR:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
          clean: true
          fetch-depth: 0

      - name: Create and upload canary build
        uses: conda/actions/canary-release@v22.10.0
        with:
          package-name: ${{ github.event.repository.name }}
          subdir: ${{ matrix.subdir }}
          anaconda-org-channel: conda-canary
          anaconda-org-label: ${{ github.ref_name == 'main' && 'dev' || github.ref_name }}
          anaconda-org-token: ${{ secrets.ANACONDA_ORG_CONDA_CANARY_TOKEN }}
