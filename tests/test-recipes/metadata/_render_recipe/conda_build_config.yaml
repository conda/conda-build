# from https://github.com/conda-forge/petsc4py-feedstock/blob/ccb2a3aed8e07d554b5f8e1dee47508a8d81cac4/recipe/conda_build_config.yaml
mpi:
  - mpich
  - openmpi

scalar:
  - real
  - complex

device:
  - host
  - cuda11  # [linux]
  - cuda12  # [linux]

# from https://github.com/conda-forge/conda-forge-pinning-feedstock/blob/9eed6c22e88a0c853e0781ebb1f14589b65c6c36/recipe/conda_build_config.yaml
c_compiler:
  - gcc                        # [linux]
  - clang                      # [osx]
  - vs2019                     # [win and x86_64]
  - vs2022                     # [win and arm64]
c_compiler_version:            # [unix]
  - 13                         # [linux]
  - 17                         # [osx]
  - 11                         # [os.environ.get("CF_CUDA_ENABLED", "False") == "True" and linux]
  - 12                         # [os.environ.get("CF_CUDA_ENABLED", "False") == "True" and linux]
c_stdlib:
  - sysroot                    # [linux]
  - macosx_deployment_target   # [osx]
  - vs                         # [win]
m2w64_c_stdlib:                # [win]
  - m2w64-toolchain            # [win]
c_stdlib_version:              # [unix]
  - 2.17                       # [linux]
  - 2.17                       # [linux and os.environ.get("CF_CUDA_ENABLED", "False") == "True"]
  - 2.17                       # [linux and os.environ.get("CF_CUDA_ENABLED", "False") == "True"]
  - 10.13                      # [osx and x86_64]
  - 11.0                       # [osx and arm64]
cxx_compiler:
  - gxx                        # [linux]
  - clangxx                    # [osx]
  - vs2019                     # [win and x86_64]
  - vs2022                     # [win and arm64]
cxx_compiler_version:          # [unix]
  - 13                         # [linux]
  - 17                         # [osx]
  - 11                         # [os.environ.get("CF_CUDA_ENABLED", "False") == "True" and linux]
  - 12                         # [os.environ.get("CF_CUDA_ENABLED", "False") == "True" and linux]
llvm_openmp:                   # [osx]
  - 17                         # [osx]
fortran_compiler:              # [unix or win64]
  - gfortran                   # [linux64 or (osx and x86_64)]
  - gfortran                   # [aarch64 or ppc64le or armv7l or s390x]
  - flang                      # [win64]
fortran_compiler_version:      # [unix or win64]
  - 13                         # [linux]
  - 13                         # [osx]
  - 5                          # [win64]
  - 11                         # [os.environ.get("CF_CUDA_ENABLED", "False") == "True" and linux]
  - 12                         # [os.environ.get("CF_CUDA_ENABLED", "False") == "True" and linux]
m2w64_c_compiler:              # [win]
  - m2w64-toolchain            # [win]
m2w64_cxx_compiler:            # [win]
  - m2w64-toolchain            # [win]
m2w64_fortran_compiler:        # [win]
  - m2w64-toolchain            # [win]

cuda_compiler:
  - None
  - nvcc                       # [(linux or win64) and os.environ.get("CF_CUDA_ENABLED", "False") == "True"]
  - cuda-nvcc                  # [(linux or win64) and os.environ.get("CF_CUDA_ENABLED", "False") == "True"]
cuda_compiler_version:
  - None
  - 11.8                       # [(linux or win64) and os.environ.get("CF_CUDA_ENABLED", "False") == "True"]
  - 12.0                       # [(linux or win64) and os.environ.get("CF_CUDA_ENABLED", "False") == "True"]
cuda_compiler_version_min:
  - None                       # [osx]
  - 11.8                       # [linux or win64]

arm_variant_type:              # [aarch64]
  - sbsa                       # [aarch64]

_libgcc_mutex:
  - 0.1 conda_forge
#
# Go Compiler Options
#

# The basic go-compiler with CGO disabled,
# It generates fat binaries without libc dependencies
# The activation scripts will set your CC,CXX and related flags
# to invalid values.
go_compiler:
  - go-nocgo
# The go compiler build with CGO enabled.
# It can generate fat binaries that depend on conda's libc.
# You should use this compiler if the underlying
# program needs to link against other C libraries, in which
# case make sure to add  'c,cpp,fortran_compiler' for unix
# and the m2w64 equivalent for windows.
cgo_compiler:
  - go-cgo
# The following are helpful variables to simplify go meta.yaml files.
target_goos:
  - linux                      # [linux]
  - darwin                     # [osx]
  - windows                    # [win]
target_goarch:
  - amd64                      # [x86_64]
  - arm64                      # [arm64 or aarch64]
  - ppc64le                    # [ppc64le]
target_goexe:
  -                            # [unix]
  - .exe                       # [win]
target_gobin:
  - '${PREFIX}/bin/'           # [unix]
  - '%PREFIX%\bin\'            # [win]

# Rust Compiler Options
rust_compiler:
  - rust

# the numbers here are the Darwin Kernel version for macOS 10.9 & 11.0;
# this is used to form our target triple on osx, and nothing else. After
# we bumped the minimum macOS version to 10.13, this was left unchanged,
# since it is not essential, and long-term we'd like to remove the version.
macos_machine:                 # [osx]
  - x86_64-apple-darwin13.4.0  # [osx and x86_64]
  - arm64-apple-darwin20.0.0   # [osx and arm64]
MACOSX_DEPLOYMENT_TARGET:      # [osx]
  - 11.0                       # [osx and arm64]
  - 10.13                      # [osx and x86_64]
VERBOSE_AT:
  - V=1
VERBOSE_CM:
  - VERBOSE=1

channel_sources:
  - conda-forge

channel_targets:
  - conda-forge main

cdt_name:  # [linux]
  - cos7   # [linux]

  - cos7   # [linux and os.environ.get("CF_CUDA_ENABLED", "False") == "True"]
  - cos7   # [linux and os.environ.get("CF_CUDA_ENABLED", "False") == "True"]

docker_image:                                   # [os.environ.get("BUILD_PLATFORM", "").startswith("linux-")]
  # Native builds
  - quay.io/condaforge/linux-anvil-cos7-x86_64  # [os.environ.get("BUILD_PLATFORM") == "linux-64"]
  - quay.io/condaforge/linux-anvil-aarch64      # [os.environ.get("BUILD_PLATFORM") == "linux-aarch64"]
  - quay.io/condaforge/linux-anvil-ppc64le      # [os.environ.get("BUILD_PLATFORM") == "linux-ppc64le"]
  - quay.io/condaforge/linux-anvil-armv7l       # [os.environ.get("BUILD_PLATFORM") == "linux-armv7l"]

  # CUDA 11.8
  - quay.io/condaforge/linux-anvil-cuda:11.8              # [linux64 and os.environ.get("CF_CUDA_ENABLED", "False") == "True" and os.environ.get("BUILD_PLATFORM") == "linux-64"]
  # CUDA 11.8 arch: native compilation (build == target)
  - quay.io/condaforge/linux-anvil-ppc64le-cuda:11.8      # [ppc64le and os.environ.get("CF_CUDA_ENABLED", "False") == "True" and os.environ.get("BUILD_PLATFORM") == "linux-ppc64le"]
  - quay.io/condaforge/linux-anvil-aarch64-cuda:11.8      # [aarch64 and os.environ.get("CF_CUDA_ENABLED", "False") == "True" and os.environ.get("BUILD_PLATFORM") == "linux-aarch64"]
  # CUDA 11.8 arch: cross-compilation (build != target)
  - quay.io/condaforge/linux-anvil-cuda:11.8              # [ppc64le and os.environ.get("CF_CUDA_ENABLED", "False") == "True" and os.environ.get("BUILD_PLATFORM") == "linux-64"]
  - quay.io/condaforge/linux-anvil-cuda:11.8              # [aarch64 and os.environ.get("CF_CUDA_ENABLED", "False") == "True" and os.environ.get("BUILD_PLATFORM") == "linux-64"]

  # CUDA 12
  - quay.io/condaforge/linux-anvil-cos7-x86_64            # [linux64 and os.environ.get("CF_CUDA_ENABLED", "False") == "True" and os.environ.get("BUILD_PLATFORM") == "linux-64"]
  # case: native compilation (build == target)
  - quay.io/condaforge/linux-anvil-ppc64le                # [ppc64le and os.environ.get("CF_CUDA_ENABLED", "False") == "True" and os.environ.get("BUILD_PLATFORM") == "linux-ppc64le"]
  - quay.io/condaforge/linux-anvil-aarch64                # [aarch64 and os.environ.get("CF_CUDA_ENABLED", "False") == "True" and os.environ.get("BUILD_PLATFORM") == "linux-aarch64"]
  # case: cross-compilation (build != target)
  - quay.io/condaforge/linux-anvil-cos7-x86_64            # [ppc64le and os.environ.get("CF_CUDA_ENABLED", "False") == "True" and os.environ.get("BUILD_PLATFORM") == "linux-64"]
  - quay.io/condaforge/linux-anvil-cos7-x86_64            # [aarch64 and os.environ.get("CF_CUDA_ENABLED", "False") == "True" and os.environ.get("BUILD_PLATFORM") == "linux-64"]

zip_keys:
  # For CUDA, c_stdlib_version/cdt_name is zipped below with the compilers.
  -                             # [linux and os.environ.get("CF_CUDA_ENABLED", "False") != "True"]
    - c_stdlib_version          # [linux and os.environ.get("CF_CUDA_ENABLED", "False") != "True"]
    - cdt_name                  # [linux and os.environ.get("CF_CUDA_ENABLED", "False") != "True"]
  -                             # [unix]
    - c_compiler_version        # [unix]
    - cxx_compiler_version      # [unix]
    - fortran_compiler_version  # [unix]
    - c_stdlib_version          # [linux and os.environ.get("CF_CUDA_ENABLED", "False") == "True"]
    - cdt_name                  # [linux and os.environ.get("CF_CUDA_ENABLED", "False") == "True"]
    - cuda_compiler             # [linux and os.environ.get("CF_CUDA_ENABLED", "False") == "True"]
    - cuda_compiler_version     # [linux and os.environ.get("CF_CUDA_ENABLED", "False") == "True"]
    - docker_image              # [linux and os.environ.get("CF_CUDA_ENABLED", "False") == "True" and os.environ.get("BUILD_PLATFORM", "").startswith("linux-")]
  -                             # [win64 and os.environ.get("CF_CUDA_ENABLED", "False") == "True"]
    - cuda_compiler             # [win64 and os.environ.get("CF_CUDA_ENABLED", "False") == "True"]
    - cuda_compiler_version     # [win64 and os.environ.get("CF_CUDA_ENABLED", "False") == "True"]
  -
    - python
    - numpy
    - python_impl
  -
    - libarrow
    - libarrow_all


# aarch64 specifics because conda-build sets many things to centos 6
# this can probably be removed when conda-build gets updated defaults
# for aarch64
cdt_arch: aarch64                       # [aarch64]
BUILD: aarch64-conda_cos7-linux-gnu     # [aarch64]

# armv7l specifics because conda-build sets many things to centos 6
# this can probably be removed when conda-build gets updated defaults
# for aarch64
cdt_arch: armv7l                          # [armv7l]
BUILD: armv7-conda_cos7-linux-gnueabihf   # [armv7l]

pin_run_as_build:
  # TODO: add run_exports to the following feedstocks
  libsvm:
    max_pin: x
  netcdf-cxx4:
    max_pin: x.x
  vlfeat:
    max_pin: x.x.x

# Pinning packages

# blas
libblas:
  - 3.9 *netlib
libcblas:
  - 3.9 *netlib
liblapack:
  - 3.9 *netlib
liblapacke:
  - 3.9 *netlib
blas_impl:
  - openblas
  - mkl          # [x86 or x86_64]
  - blis         # [x86 or x86_64]

# this output was dropped as of libabseil 20230125
abseil_cpp:
  - '20220623.0'
alsa_lib:
  - '1.2'
antic:
  - 0.2
aom:
  - '3.9'
arb:
  - '2.23'
arpack:
  - '3.9'
assimp:
  - 5.4.1
attr:
  - 2.5
aws_c_auth:
  - 0.7.31
aws_c_cal:
  - 0.7.4
aws_c_common:
  - 0.9.28
aws_c_compression:
  - 0.2.19
# coupled to aws_c_common version bump, see
# https://github.com/conda-forge/aws-c-http-feedstock/pull/109
aws_c_event_stream:
  - 0.4.3
aws_c_http:
  - 0.8.10
# the builds got coupled because 0.2.4 landed before the this migrator finished
aws_c_io:
  - 0.14.18
# the builds got coupled because 0.2.4 landed before the io migrator
aws_c_mqtt:
  - 0.10.5
aws_c_s3:
  - 0.6.5
aws_c_sdkutils:
  - 0.1.19
aws_checksums:
  - 0.1.20
aws_crt_cpp:
  - 0.28.2
aws_sdk_cpp:
  - 1.11.379
azure_core_cpp:
  - 1.13.0
azure_identity_cpp:
  - 1.8.0
azure_storage_blobs_cpp:
  - 12.12.0
azure_storage_common_cpp:
  - 12.7.0
azure_storage_files_datalake_cpp:
  - 12.11.0
azure_storage_files_shares_cpp:
  - 12.10.0
azure_storage_queues_cpp:
  - 12.3.0
bullet_cpp:
  - 3.25
bzip2:
  - 1
c_ares:
  - 1
c_blosc2:
  - '2.15'
cairo:
  - 1
capnproto:
  - 1.0.2
ccr:
  - 1.3
cfitsio:
  - 4.3.1
coin_or_cbc:
  - 2.10
coincbc:
  - 2.10
coin_or_cgl:
  - 0.60
coin_or_clp:
  - 1.17
coin_or_osi:
  - 0.108
coin_or_utils:
  - 2.11
console_bridge:
  - 1.0
cudnn:
  - 8
cutensor:
  - 2
curl:
  - 8
dav1d:
  - 1.2.1
davix:
  - '0.8'
dbus:
  - 1
dcap:
  - 2.47
eclib:
  - '20231211'
elfutils:
  - '0.191'
exiv2:
  - '0.28'
expat:
  - 2
ffmpeg:
  - '6'
fftw:
  - 3
flann:
  - 1.9.2
flatbuffers:
  - 24.3.25
fmt:
  - '10'
fontconfig:
  - 2
freetype:
  - 2
gct:
  - 6.2.1705709074
gf2x:
  - '1.3'
gdk_pixbuf:
  - 2
gnuradio_core:
  - 3.10.11
gnutls:
  - '3.8'
gsl:
  - 2.7
gsoap:
  - 2.8.123
gstreamer:
  - '1.22'
gst_plugins_base:
  - '1.22'
gdal:
  - '3.9'
libgdal:
  - '3.9'
libgdal_core:
  - '3.9'
geos:
  - 3.12.2
geotiff:
  - 1.7.3
gfal2:
  - '2.23'
gflags:
  - 2.2
giflib:
  - 5.2
glew:
  - 2.1
glib:
  - '2'
glog:
  - '0.7'
glpk:
  - '5.0'
gmp:
  - 6
# keep google_cloud_cpp in sync with libgoogle_cloud_*
google_cloud_cpp:
  - '2.29'
google_cloud_cpp_common:
  - 0.25.0
googleapis_cpp:
  - '0.10'
graphviz:
  - '12'
# this has been renamed to libgrpc as of 1.49; dropped as of 1.52.
# IOW, this version is unavailable; makes the renaming more obvious
grpc_cpp:
  - '1.52'
harfbuzz:
  - '9'
hdf4:
  - 4.2.15
hdf5:
  - 1.14.3
icu:
  - '73'
idyntree:
  - '12'
imath:
  - 3.1.11
ipopt:
  - 3.14.16
isl:
  - '0.26'
jasper:
  - 4
jpeg:
  - 9
lcms2:
  - 2
lerc:
  - '4'
libjpeg_turbo:
  - '3'
libev:
  - 4.33
json_c:
  - '0.17'
jsoncpp:
  - 1.9.5
kealib:
  - '1.5'
krb5:
  - '1.21'
ldas_tools_framecpp:
  - '2.9'
libabseil:
  - '20240116'
libabseil_static:
  - '20220623.0'
libaec:
  - '1'
libarchive:
  - '3.7'
libarrow:
  - '17.0'
  - '16.1'
  - 15
  - 14
libarrow_all:
  - '17.0'
  - '16.1'
  - 15
  - 14
libavif:
  - 1
libblitz:
  - 1.0.2
libboost_devel:
  - '1.84'
libboost_headers:
  - '1.84'
libboost_python_devel:
  - '1.84'
libcint:
  - '6.1'
libcurl:
  - 8
libcrc32c:
  - 1.1
libdap4:
  - 3.20.6
libdeflate:
  - '1.21'
libduckdb_devel:
  - '1'
libeantic:
  - '2'
libevent:
  - 2.1.12
libexactreal:
  - '4'
libffi:
  - '3.4'
libflatsurf:
  - 3
libflint:
  - '3.0'
libframel:
  - '8.41'
libgit2:
  - '1.8'
# Keep in sync with google_cloud_cpp
libgoogle_cloud:
  - '2.29'
libgoogle_cloud_devel:
  - '2.29'
libgoogle_cloud_all_devel:
  - '2.29'
libgoogle_cloud_aiplatform_devel:
  - '2.29'
libgoogle_cloud_automl_devel:
  - '2.29'
libgoogle_cloud_bigquery_devel:
  - '2.29'
libgoogle_cloud_bigtable_devel:
  - '2.29'
libgoogle_cloud_compute_devel:
  - '2.29'
libgoogle_cloud_dialogflow_cx_devel:
  - '2.29'
libgoogle_cloud_dialogflow_es_devel:
  - '2.29'
libgoogle_cloud_discoveryengine_devel:
  - '2.29'
libgoogle_cloud_dlp_devel:
  - '2.29'
libgoogle_cloud_iam_devel:
  - '2.29'
libgoogle_cloud_oauth2_devel:
  - '2.29'
libgoogle_cloud_policytroubleshooter_devel:
  - '2.29'
libgoogle_cloud_pubsub_devel:
  - '2.29'
libgoogle_cloud_spanner_devel:
  - '2.29'
libgoogle_cloud_speech_devel:
  - '2.29'
libgoogle_cloud_storage_devel:
  - '2.29'
libgrpc:
  - "1.62"
libhugetlbfs:
  - 2
libhwloc:
  - 2.11.1
libhwy:
  - '1.1'
libiconv:
  - 1
libidn2:
  - 2
libintervalxt:
  - 3
libitk_devel:
  - 5.4
libkml:
  - 1.3
libkml_devel:
  - 1.3
libiio:
  - 0
libitk_devel:
  - 5.4
libmed:
  - '4.1'
libmatio:
  - 1.5.27
libmatio_cpp:
  - 0.2.5
libmicrohttpd:
  - '1.0'
libnetcdf:
  - 4.9.2
libode:
  - 0.16.2
libopencv:
  - 4.10.0
libopentelemetry_cpp:
  - '1.16'
libosqp:
  - 0.6.3
libopenvino_dev:
  - 2024.3.0
libpcap:
  - '1.10'
libpng:
  - 1.6
libprotobuf:
  - 4.25.3
libpq:
  - '16'
libraw:
  - '0.21'
librdkafka:
  - '2.4'
librsvg:
  - 2
libsecret:
  - 0.18
libsentencepiece:
  - 0.2.0
libsndfile:
  - '1.2'
libsoup:
  - 3
libspatialindex:
  - 2.0.0
libssh:
  - 0.10
libssh2:
  - 1
libsvm:
  - '332'
# keep libsqlite in sync with sqlite
libsqlite:
  - 3
libtensorflow:
  - "2.16"
libtensorflow_cc:
  - "2.16"
libthrift:
  - 0.20.0
libtiff:
  - '4.6'
# keep in synch with pytorch
libtorch:
  - '2.3'
libunwind:
  - '1.6'
libv8:
  - 8.9.83
libvigra:
  - '1.12'
libvips:
  - 8
libwebp:
  - 1
libwebp_base:
  - 1
libxcb:
  - '1.16'
libxml2:
  - 2
libxsmm:
  - 1
libuuid:
  - 2
libyarp:
  - 3.9.0
libzip:
  - 1
lmdb:
  - 0.9.29
log4cxx:
  - 1.2.0
lz4_c:
  - '1.9.3'
lzo:
  - 2
metis:
  - 5.1.0
mimalloc:
  - 2.1.7
mkl:
  - '2023'
mkl_devel:
  - 2023
mpg123:
  - '1.32'
mpich:
  - 4
mpfr:
  - 4
msgpack_c:
  - 6
msgpack_cxx:
  - 6
mumps_mpi:
  - 5.7.2
mumps_seq:
  - 5.7.2
nccl:
  - 2
ncurses:
  - 6
netcdf_cxx4:
  - 4.3
netcdf_fortran:
  - '4.6'
nettle:
  - '3.9'
nodejs:
  - '20'
  - '18'
nss:
  - 3
nspr:
  - 4
nlopt:
  - '2.7'
ntl:
  - '11.4.3'
# we build for the oldest version possible of numpy for forward compatibility
# we roughly follow NEP29 in choosing the oldest version
numpy:
  # part of a zip_keys: python, python_impl, numpy
  - 1.22
  - 1.22
  - 1.23
  - 1.26
occt:
  - 7.7.2
openblas:
  - 0.3.*
openexr:
  - '3.2'
openh264:
  - 2.4.1
openjpeg:
  - '2'
openmpi:
  - 4
openslide:
  - 4
openssl:
  - '3'
orc:
  - 2.0.2
pango:
  - '1'
pari:
  - 2.15.* *_pthread
pcl:
  - 1.14.1
perl:
  - 5.32.1
petsc:
  - '3.21'
petsc4py:
  - '3.21'
pugixml:
  - '1.14'
slepc:
  - '3.21'
slepc4py:
  - '3.21'
svt_av1:
  - 2.2.1
p11_kit:
  - '0.24'
pcre:
  - '8'
pcre2:
  - '10.44'
pdal:
  - '2.7'
libpdal:
  - '2.7'
libpdal_core:
  - '2.7'
pixman:
  - 0
poco:
  - 1.13.3
poppler:
  - '24.08'
postgresql:
  - '16'
postgresql_plpython:
  - '16'
proj:
  - '9.4'
pulseaudio:
  - '17.0'
pulseaudio_client:
  - '17.0'
pulseaudio_daemon:
  - '17.0'
pybind11_abi:
  - 4
python:
  # part of a zip_keys: python, python_impl, numpy
  - 3.9.* *_cpython
  - 3.10.* *_cpython
  - 3.11.* *_cpython
  - 3.12.* *_cpython
python_impl:
  # part of a zip_keys: python, python_impl, numpy
  - cpython
  - cpython
  - cpython
  - cpython
is_freethreading:
  - false
# Keep in sync with libtorch
pytorch:
  - '2.3'
pyqt:
  - 5.15
pyqtwebengine:
  - 5.15
pyqtchart:
  - 5.15
qhull:
  - 2020.2
qpdf:
  - 11
qt:
  - 5.15
qt_main:
  - 5.15
qt6_main:
  - '6.7'
qtkeychain:
  - '0.14'
rdma_core:
  - '53'
re2:
  - 2023.09.01
readline:
  - "8"
rocksdb:
  - '9.1'
root_base:
  - 6.28.12
  - 6.30.4
ruby:
  - 2.5
  - 2.6
r_base:
  - 4.1   # [win]
  - 4.3   # [not win]
libscotch:
  - 7.0.4
libptscotch:
  - 7.0.4
scotch:
  - 7.0.4
ptscotch:
  - 7.0.4
s2n:
  - 1.5.2
sdl2:
  - '2'
sdl2_image:
  - '2'
sdl2_mixer:
  - '2'
sdl2_net:
  - '2'
sdl2_ttf:
  - '2'
singular:
  - 4.3.2.p8
snappy:
  - 1.2
soapysdr:
  - '0.8'
sox:
  - 14.4.2
spdlog:
  - '1.12'
# keep sqlite in sync with libsqlite
sqlite:
  - 3
srm_ifce:
  - 1.24.6
starlink_ast:
  - 9.2.11
suitesparse:
  - '7'
superlu_dist:
  - '9'
tbb:
  - '2021'
tbb_devel:
  - '2021'
tensorflow:
  - "2.16"
thrift_cpp:
  - 0.20.0
tinyxml2:
  - '10'
tk:
  - 8.6                # [not ppc64le]
tiledb:
  - '2.25'
ucx:
  - '1.16.0'
uhd:
  - 4.7.0
urdfdom:
  - '4.0'
vc:                    # [win]
  - 14                 # [win]
vigra:
  - '1.12'
vlfeat:
  - 0.9.21
volk:
  - '3.1'
vtk:
  - 9.2.6
wcslib:
  - '8'
wxwidgets:
  - '3.2'
x264:
  - '1!164.*'
x265:
  - '3.5'
xerces_c:
  - 3.2
xrootd:
  - '5'
xz:
  - 5
zeromq:
  - '4.3.5'
zfp:
  - 1.0
zlib:
  - 1
zlib_ng:
  - '2.2'
zstd:
  - '1.5'
