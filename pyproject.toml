[build-system]
build-backend = "hatchling.build"
requires = [
  "hatchling >=1.12.2",
  "hatch-vcs >=0.2.0",
]

[project]
authors = [{name = "Anaconda, Inc.", email = "conda@continuum.io"}]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "License :: OSI Approved :: BSD License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
  "beautifulsoup4",
  "chardet",
  "conda >=23.7.0",
  "conda-index >=0.4.0",
  "conda-package-handling >=1.3",
  "filelock",
  "frozendict >=2.4.2",
  "jinja2",
  "jsonschema >=4.19",
  "libarchive-c",
  "menuinst >=2",
  "packaging",
  "pkginfo",
  "psutil",
  "pytz",
  "pyyaml",
  "requests",
  "tomli ; python_version<'3.11'",
  "tqdm",
]
description = "tools for building conda packages"
dynamic = ["version"]
license = {file = "LICENSE"}
name = "conda-build"
readme = "README.md"
requires-python = ">=3.8"

[project.entry-points.conda]
conda-build = "conda_build.plugin"

[project.scripts]
conda-build = "conda_build.cli.main_build:execute"
conda-convert = "conda_build.cli.main_convert:execute"
conda-debug = "conda_build.cli.main_debug:execute"
conda-develop = "conda_build.cli.main_develop:execute"
conda-inspect = "conda_build.cli.main_inspect:execute"
conda-metapackage = "conda_build.cli.main_metapackage:execute"
conda-render = "conda_build.cli.main_render:execute"
conda-skeleton = "conda_build.cli.main_skeleton:execute"

[project.urls]
changelog = "https://github.com/conda/conda-build/blob/main/CHANGELOG.md"
documentation = "https://docs.conda.io/projects/conda-build/en/stable/"
repository = "https://github.com/conda/conda-build"

[tool.coverage.report]
exclude_lines = [
  "if TYPE_CHECKING:",  # ignoring type checking imports
]
omit = ["conda_build/skeletons/_example_skeleton.py"]
show_missing = true
skip_covered = true
sort = "Miss"

[tool.coverage.run]
# store relative paths in coverage information
relative_files = true

[tool.hatch.build]
include = ["conda_build", "conda_build/templates/*", "conda_build/cli-*.exe"]

[tool.hatch.build.hooks.vcs]
version-file = "conda_build/_version.py"

[tool.hatch.version]
source = "vcs"

[tool.hatch.version.raw-options]
local_scheme = "dirty-tag"

[tool.pytest.ini_options]
addopts = [
  "--color=yes",
  # "--cov=conda_build",   # passed in test runner scripts instead (avoid debugger)
  "--cov-append",
  "--cov-branch",
  "--cov-report=term",  # print summary table to screen
  "--cov-report=xml",  # for codecov/codecov-action upload
  "--durations=16",  # show 16 slowest tests
  "--junitxml=junit.xml",
  # "--splitting-algorithm=least_duration",  # not available yet
  # "--store-durations",  # not available yet
  "--strict-markers",
  "--tb=native",
  "--xdoctest-modules",
  "--xdoctest-style=google",
  "-vv",
]
doctest_optionflags = [
  "NORMALIZE_WHITESPACE",
  "IGNORE_EXCEPTION_DETAIL",
  "ALLOW_UNICODE",
  "ELLIPSIS",
]
filterwarnings = [
  # elevate conda's deprecated warning to an error
  "error::PendingDeprecationWarning:conda",
  "error::DeprecationWarning:conda",
  # elevate conda-build's deprecated warning to an error
  "error::PendingDeprecationWarning:conda_build",
  "error::DeprecationWarning:conda_build",
  # ignore numpy.distutils error
  'ignore:\s+`numpy.distutils` is deprecated:DeprecationWarning:conda_build._load_setup_py_data',
  # ignore conda-index error
  "ignore::PendingDeprecationWarning:conda_index",
  "ignore::DeprecationWarning:conda_index",
]
markers = [
  "serial: execute test serially (to avoid race conditions)",
  "slow: execute the slow tests if active",
  "sanity: execute the sanity tests",
  "no_default_testing_config: used internally to disable monkeypatching for testing_config",
  "benchmark: execute the benchmark tests",
]
minversion = 3.0
norecursedirs = ["tests/test-recipes/*"]
testpaths = ["tests"]

[tool.ruff]
target-version = "py38"

[tool.ruff.lint]
flake8-type-checking = {exempt-modules = [], strict = true}
ignore = [
  "E402",  # module level import not at top of file
  "E722",  # do not use bare 'except'
  "E731",  # do not assign a lambda expression, use a def
]
pycodestyle = {max-line-length = 120}
# see https://docs.astral.sh/ruff/rules/
select = [
  "E",  # pycodestyle errors
  "F",  # pyflakes
  "FA",  # flake8-future-annotations
  "I",  # isort
  "ISC",  # flake8-implicit-str-concat
  "T10",  # flake8-debugger
  "TCH",  # flake8-type-checking
  "UP",  # pyupgrade
  "W",  # pycodestyle warnings
]
