[build-system]
requires = [
  "hatchling >=1.12.2",
  "hatch-vcs >=0.2.0",
]
build-backend = "hatchling.build"

[project]
name = "conda-build"
description="tools for building conda packages"
readme = "README.md"
authors = [{name = "Anaconda, Inc.", email = "conda@continuum.io"}]
license = {file = "LICENSE"}
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "License :: OSI Approved :: BSD License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy"
]
requires-python = ">=3.8"
dependencies = [
  "beautifulsoup4",
  "chardet",
  "conda >=22.11",
  "conda-index",
  "conda-package-handling >=1.3",
  "filelock",
  "jinja2",
  "jsonschema >=4.19",
  "libarchive-c",
  "menuinst",
  "packaging",
  "pkginfo",
  "psutil",
  "pytz",
  "pyyaml",
  "requests",
  "tomli ; python_version<'3.11'",
  "tqdm",
]
dynamic = ["version"]

[project.urls]
documentation = "https://docs.conda.io/projects/conda-build/en/stable/"
repository = "https://github.com/conda/conda-build"
changelog = "https://github.com/conda/conda-build/blob/main/CHANGELOG.md"

[project.scripts]
conda-build = "conda_build.cli.main_build:main"
conda-convert = "conda_build.cli.main_convert:main"
conda-develop = "conda_build.cli.main_develop:main"
conda-index = "conda_build.cli.main_index:main"
conda-inspect = "conda_build.cli.main_inspect:main"
conda-metapackage = "conda_build.cli.main_metapackage:main"
conda-render = "conda_build.cli.main_render:main"
conda-skeleton = "conda_build.cli.main_skeleton:main"
conda-debug = "conda_build.cli.main_debug:main"

[project.entry-points."distutils.commands"]
bdist_conda = "conda_build.bdist_conda:bdist_conda"

[project.entry-points.conda]
conda-build = "conda_build.plugin"

[tool.hatch.version]
source = "vcs"

[tool.hatch.version.raw-options]
local_scheme = "dirty-tag"

[tool.hatch.build]
include = ["conda_build", "conda_build/templates/*", "conda_build/cli-*.exe"]

[tool.hatch.build.hooks.vcs]
version-file = "conda_build/__version__.py"

[tool.coverage.run]
# store relative paths in coverage information
relative_files = true

[tool.coverage.report]
show_missing = true
sort = "Miss"
skip_covered = true
omit = ["conda_build/skeletons/_example_skeleton.py"]

[tool.ruff]
pycodestyle = {max-line-length = 120}
# E, W = pycodestyle errors and warnings
# F = pyflakes
# I = isort
select = ["E", "W", "F", "I"]
# E402 module level import not at top of file
# E722 do not use bare 'except'
# E731 do not assign a lambda expression, use a def
ignore = ["E402", "E722", "E731"]
target-version = "py38"
pydocstyle = {convention = "pep257"}

[tool.pytest.ini_options]
minversion = 3.0
testpaths = ["tests"]
norecursedirs = ["tests/test-recipes/*"]
addopts = [
  "--color=yes",
  # "--cov=conda_build",   # passed in test runner scripts instead (avoid debugger)
  "--cov-append",
  "--cov-branch",
  "--cov-report=term-missing",
  "--cov-report=xml",
  "--durations=16",
  "--junitxml=junit.xml",
  # "--splitting-algorithm=least_duration",  # not available yet
  # "--store-durations",  # not available yet
  "--strict-markers",
  "--tb=native",
  "-vv",
]
markers = [
  "serial: execute test serially (to avoid race conditions)",
  "slow: execute the slow tests if active",
  "sanity: execute the sanity tests",
  "no_default_testing_config: used internally to disable monkeypatching for testing_config",
]
